"""
DESCRIPTION: Audio engine learning model prototype.
The idea relies in wavelet decomposition of the incoming sound signal.
As well known, the Wavelet Transform and its inverse can provide the weights of 
any signal. Thus - in idea, getting the weights the satisfy the equation at the 
TF Wave Level and classify it in a micro scale.

Author: Josué Enrique Peraza Velázquez


""""


import numpy as np
import pywt
import sounddevice as sd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Parameters
duration = 5  # seconds
sample_rate = 44100  # samples per second

# Callback function to capture audio input
def callback(indata, frames, time, status):
    if status:
        print(status, flush=True)
    buffer.extend(indata[:, 0])

# Create an empty buffer to store the audio input
buffer = []

# Open a stream to capture audio input
with sd.InputStream(callback=callback, channels=1, samplerate=sample_rate):
    print(f"Listening for {duration} seconds... Please make some noise!")
    sd.sleep(int(duration * 1000))

# Convert the buffer to a NumPy array
audio_signal = np.array(buffer)

# Coiflet 5 wavelet decomposition
coeffs = pywt.wavedec(audio_signal, 'coif5', level=5)

# Extract features from the wavelet coefficients
coiflet_features = np.concatenate(coeffs)

# Apply inverse wavelet transform to reconstruct denoised signal
denoised_signal = pywt.waverec(coeffs, 'coif5')

# Assuming a binary classification task (replace with your own labels)
labels = np.ones(len(coiflet_features))  # Replace with appropriate labels

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(coiflet_features, labels, test_size=0.2, random_state=42)

# Create a pipeline with Logistic Regression
pipeline = Pipeline([
    ('classifier', LogisticRegression(random_state=42))
])

# Train the model using the pipeline
pipeline.fit(X_train.reshape(-1, 1), y_train)  # Reshape to 2D array

# Apply inverse wavelet transform to reconstruct denoised test set
denoised_test_set = pywt.waverec(X_test.reshape(-1, 1), 'coif5')

# Use denoised test set features for prediction
y_pred = pipeline.predict(denoised_test_set.reshape(-1, 1))

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")